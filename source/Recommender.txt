1: Define the research community:
-----------------------------------------------------------------

CREATE CONSTRAINT ON (c:Community) ASSERT (c.name) IS NODE KEY;

-----------------------------------------------------------------

CREATE (:Community {name: 'database'});

-----------------------------------------------------------------

MATCH (pa:Paper)
MATCH (co:Community {name: 'database'})
WHERE ANY(x IN pa.keywords WHERE x IN ['data management', 'indexing', 'data modeling', 'big data', 'data processing', 'data storage', 'data querying'])
MERGE (pa)-[:Part_of]->(co);

-----------------------------------------------------------------
2: Find the conferences and journals related to the database community:
-----------------------------------------------------------------

MATCH (jo:Journal)-[:Publishes]-(pa:Paper)
WITH jo.name as journal, ToFloat(count(distinct pa)) as total_papers
CALL {
    WITH journal
    MATCH (jo {name:journal})-[:Publishes]-(pa)-[:Part_of]-(co:Community {name:         'database'})
    RETURN jo.name, ToFloat(count(distinct pa)) as papers_in_community
}
WITH papers_in_community/total_papers as prop_in_community, journal
WHERE prop_in_community > 0.9
RETURN journal, prop_in_community;

-----------------------------------------------------------------

MATCH (con:Conference)-[:Publishes]-(pa:Paper)
WITH con.name as conference, ToFloat(count(distinct pa)) as total_papers
CALL {
    WITH conference
    MATCH (con {name:conference})-[:Publishes]-(pa)-[:Part_of]-(co:Community {name:         'database'})
    RETURN con.name, ToFloat(count(distinct pa)) as papers_in_community
}
WITH papers_in_community/total_papers as prop_in_community, conference
WHERE prop_in_community > 0.9
RETURN conference, prop_in_community;

-----------------------------------------------------------------
3: identify the top papers of these conferences/journals
-----------------------------------------------------------------

CALL gds.graph.create.cypher(
  'database_papers',
  'MATCH (co:Community {name: "database"})-[]-(p:Paper) RETURN id(p) AS id',
  'MATCH (p)-[c:Cites]->(m) RETURN id(p) as source, id(m) as target',
  {validateRelationships: False}
)
YIELD
  graphName AS graph, nodeQuery, nodeCount AS nodes, relationshipCount AS rels;

-----------------------------------------------------------------

CALL gds.pageRank.write.estimate('database_papers', {
  writeProperty: 'pageRank',
  maxIterations: 20,
  dampingFactor: 0.5
})
CALL gds.pageRank.stream('database_papers')
YIELD nodeId, score
WITH gds.util.asNode(nodeId).title  AS title, score
ORDER BY score DESC, title ASC
LIMIT 100
MATCH (pa:Paper {title:title})-[]-(co:Community {name:'database'})
MERGE (pa)-[:Top_100_paper {score:score}]->(co);

-----------------------------------------------------------------
4: we want to identify gurus:
-----------------------------------------------------------------

MATCH (a:Author)-[w:Writes]-(pa:Paper)-[:Top_100_paper]-(co:Community {name:'database'})
WITH a.name as author, count(w) as amount_of_top_papers_written
WHERE amount_of_top_papers_written >= 2
RETURN author, amount_of_top_papers_written
ORDER BY amount_of_top_papers_written DESC;








