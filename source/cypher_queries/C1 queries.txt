step one: define a new node for the similarity called commonAuthor.

match (c:Conference) - [:Publishes] -> (p:Paper) <- [:Writes] - (a:Author) - [:Writes] -> (p2:Paper) <- [:Publishes] - (c2:Conference) where c.name <> c2.name and c <> c2
with c, c2, a
merge (c) - [:connects] -> (ca:CommonAuthor {name: a.name}) <- [:connects] - (c2)

step 2: build a gds graph with the conference and the newly defined commonauthor

CALL gds.graph.create(
    'myGraph',
    ['Conference', 'CommonAuthor'],
    {
        connects: {
            type: 'connects'
        }
    }
);

step 3: call the nodesimilarity algorithm

CALL gds.nodeSimilarity.stream('myGraph')
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Conference1, gds.util.asNode(node2).name AS Conference2, similarity
ORDER BY similarity DESCENDING, Conference1, Conference2

step 4: delete all CommonAuthors

Match (c:CommonAuthor) detach delete c